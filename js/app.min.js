// document.querySelector('.burger').addEventListener('click', function() {
// 	this.classList.toggle('_active');
// })

//  advantages cards

const cards = Array.from(document.querySelectorAll(".advantages__item"));
const cardsContainer = document.querySelector(".advantages__flex");

cardsContainer.addEventListener("mousemove", (e) => {
  for (const card of cards) {
    const rect = card.getBoundingClientRect();
    let x = e.clientX - rect.left - 170;
    let y = e.clientY - rect.top - 70;

    card.style.setProperty("--mouse-x", `${x}px`);
    card.style.setProperty("--mouse-y", `${y}px`);
  }
});

//         -----------------

//slider portfolio

const portfolio__slider = document.querySelectorAll(".portfolio__slider-items");
const btnsSlider = document.querySelector(".portfolio__slider-btns");

btnsSlider.addEventListener("click", (ev) => {
  let x;
  if (ev.target.classList.contains("next")) {
    portfolio__slider.forEach((element) => {
      if (!element.classList.contains("slider")) {
        x = element.dataset.item;
        if (x >= 2) {
          x = -1;
        }
      }
      element.classList.add("slider");
    });
    portfolio__slider[+x + 1].classList.remove("slider");
  } else if (ev.target.classList.contains("prev")) {
    portfolio__slider.forEach((element) => {
      if (!element.classList.contains("slider")) {
        x = element.dataset.item;
        if (x <= 0) {
          x = 3;
        }
      }
      element.classList.add("slider");
    });
    portfolio__slider[+x - 1].classList.remove("slider");
  }
});

//

const selector1 = document.querySelectorAll(".selector1");
const selector2 = document.querySelectorAll(".selector2");
const svg = document.querySelectorAll("path");
const title = document.querySelectorAll(".title");

const colors1 = ["#600A4D", "#090620", "#0097E6", "#2e2e2e"];
const colors2 = ["#FFE5E5", "#FFE5E5", "#C3BCF9", "rgb(255, 255, 255)"];
const colors3 = ["#600A4D", "#090620", "#0097E6", "#2e2e2e"];
let colorIndex = 0;

const handlerColor = () => {
  selector1.forEach((el) => (el.style.background = colors1[colorIndex]));
  selector2.forEach((el) => (el.style.background = colors2[colorIndex]));
  svg.forEach((el) => (el.style = `fill: ${colors3[colorIndex]}`));
  title.forEach((el) => (el.style.color = colors3[colorIndex]));

  colorIndex = (colorIndex + 1) % colors1.length;
};

/// three.js
let renderer, scene, camera, cameraCtrl;
let width, height, cx, cy, wWidth, wHeight;
const TMath = THREE.Math;

let conf = {
  color: 0x000000,
  objectWidth: 12,
  objectThickness: 3,
  ambientColor: 0xffffff,
  light1Color: 0xffffff,
  shadow: false,
  perspective: 75,
  cameraZ: 75,
};

let objects = [];
let geometry, material;
let hMap, hMap0, nx, ny;

init();

function init() {
  renderer = new THREE.WebGLRenderer({ canvas: document.getElementById("reveal-effect"), antialias: true, alpha: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  camera = new THREE.PerspectiveCamera(conf.perspective, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.z = conf.cameraZ;

  scene = new THREE.Scene();
  geometry = new THREE.BoxGeometry(conf.objectWidth, conf.objectWidth, conf.objectThickness);

  window.addEventListener("load", initScene);
  document.getElementById("trigger").addEventListener("click", initScene);

  animate();
}

function initScene() {
  onResize();
  scene = new THREE.Scene();
  initLights();
  initObjects();
}

function initLights() {
  scene.add(new THREE.AmbientLight(conf.ambientColor));
  let light = new THREE.PointLight(0xffffff);
  light.position.z = 100;
  scene.add(light);
}

function initObjects() {
  objects = [];
  nx = Math.round(wWidth / conf.objectWidth) + 1;
  ny = Math.round(wHeight / conf.objectWidth) + 1;
  let mesh, x, y;
  for (let i = 0; i < nx; i++) {
    for (let j = 0; j < ny; j++) {
      material = new THREE.MeshLambertMaterial({ color: conf.color, transparent: true, opacity: 1 });
      mesh = new THREE.Mesh(geometry, material);
      x = -wWidth / 2 + i * conf.objectWidth;
      y = -wHeight / 2 + j * conf.objectWidth;
      mesh.position.set(x, y, 0);
      objects.push(mesh);
      scene.add(mesh);
    }
  }
  document.body.classList.add("loaded");
  startAnim();
}

function startAnim() {
  document.body.classList.remove("revealed");
  objects.forEach((mesh) => {
    mesh.rotation.set(0, 0, 0);
    mesh.material.opacity = 1;
    mesh.position.z = 0;
    let delay = TMath.randFloat(1, 2);
    let rx = TMath.randFloatSpread(2 * Math.PI);
    let ry = TMath.randFloatSpread(2 * Math.PI);
    let rz = TMath.randFloatSpread(2 * Math.PI);
    TweenMax.to(mesh.rotation, 2, { x: rx, y: ry, z: rz, delay: delay });
    TweenMax.to(mesh.position, 2, { z: 80, delay: delay + 0.5, ease: Power1.easeOut });
    TweenMax.to(mesh.material, 2, { opacity: 0, delay: delay + 0.5 });
  });
  setTimeout(() => {
    document.body.classList.add("revealed");
  }, 4500);
}

function animate() {
  requestAnimationFrame(animate);
  renderer.render(scene, camera);
}

function onResize() {
  width = window.innerWidth;
  cx = width / 2;
  height = window.innerHeight;
  cy = height / 2;
  camera.aspect = width / height;
  camera.updateProjectionMatrix();
  renderer.setSize(width, height);

  size = getRendererSize();
  wWidth = size[0];
  wHeight = size[1];
}

function getRendererSize() {
  const cam = new THREE.PerspectiveCamera(conf.perspective, camera.aspect);
  const vFOV = (cam.fov * Math.PI) / 180;
  const height = 2 * Math.tan(vFOV / 2) * Math.abs(conf.cameraZ);
  const width = height * cam.aspect;
  return [width, height];
}

window.addEventListener("load", () => {
  const heading = document.getElementById("heading");
  heading.style.width = "auto";
  heading.style.height = "auto";
  heading.style.backgroundColor = "transparent";
  setTimeout(() => {
    heading.style.opacity = "0"; // Fade out <h1>
  }, 1500);
});

const icon = document.querySelector(".icon");
const icon_menu = document.querySelector(".icon-menu");
const burger_menu = document.querySelector(".burger-menu");

icon.addEventListener("click", () => {
  if (burger_menu.offsetHeight < 10) {
    burger_menu.style.height = `${burger_menu.scrollHeight}px`;
  } else {
    burger_menu.style.height = `0px`;
  }
});

// stakes slider

const stakes__wrapper = document.querySelector(".stakes__wrapper-content");
const stakesBtn = document.querySelector(".stakes__btns");

let x = 0;
stakesBtn.addEventListener("click", (ev) => {
  if (x <= -1104) {
    stakes__wrapper.style.transform = `translate(0px)`;
    x = 0;
  } else {
    if (ev.target.classList.contains("next")) {
      stakes__wrapper.style.transform = `translate(${x - 169}px)`;
      stakes__wrapper.style.transition = "transform 0.5s ease";
      x = parseInt(stakes__wrapper.style.transform.replace(/[^\d.-]/g, ""));
    } else if (ev.target.classList.contains("prev")) {
      if (x === 0) {
        return;
      }
      stakes__wrapper.style.transform = `translate(${x + 169}px)`;
      x = parseInt(stakes__wrapper.style.transform.replace(/[^\d.-]/g, ""));
    }
  }
  if (x >= 0) {
    stakesBtn.children[0].style.opacity = ".5";
  } else {
    stakesBtn.children[0].style.opacity = "1";
  }
});

// var swiper = new Swiper(".stakes .swiper", {
//   effect: "cards",
//   grabCursor: true,
// });

var swiper = new Swiper(".portfolio .swiper", {
  direction: "vertical",
  slidesPerView: 1,
  spaceBetween: 30,
  mousewheel: true,
  effect: "cards",
  pagination: {
    el: ".swiper-pagination",
    clickable: true,
  },
});

// burger-close

const burgerItems = document.querySelector(".burger-menu ul");

burgerItems.addEventListener("click", (ev) => {
  if (ev.target.localName === "li" || ev.target.localName === "a") {
    burger_menu.style.height = `0px`;
  }
});
