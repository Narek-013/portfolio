// document.querySelector('.burger').addEventListener('click', function() {
// 	this.classList.toggle('_active');
// })

//  advantages cards

const cards = Array.from(document.querySelectorAll(".advantages__item"));
const cardsContainer = document.querySelector(".advantages__flex");

cardsContainer.addEventListener("mousemove", (e) => {
  for (const card of cards) {
    const rect = card.getBoundingClientRect();
    let x = e.clientX - rect.left - 170;
    let y = e.clientY - rect.top - 70;

    card.style.setProperty("--mouse-x", `${x}px`);
    card.style.setProperty("--mouse-y", `${y}px`);
  }
});

//         -----------------

//slider portfolio

const portfolio__slider = document.querySelectorAll(".portfolio__slider-items");
const btnsSlider = document.querySelector(".portfolio__slider-btns");

btnsSlider.addEventListener("click", (ev) => {
  let x;
  if (ev.target.classList.contains("next")) {
    portfolio__slider.forEach((element) => {
      if (!element.classList.contains("slider")) {
        x = element.dataset.item;
        if (x >= 2) {
          x = -1;
        }
      }
      element.classList.add("slider");
    });
    portfolio__slider[+x + 1].classList.remove("slider");
  } else if (ev.target.classList.contains("prev")) {
    portfolio__slider.forEach((element) => {
      if (!element.classList.contains("slider")) {
        x = element.dataset.item;
        if (x <= 0) {
          x = 3;
        }
      }
      element.classList.add("slider");
    });
    portfolio__slider[+x - 1].classList.remove("slider");
  }
});

//

const selector1 = document.querySelectorAll(".selector1");
const selector2 = document.querySelectorAll(".selector2");
const svg = document.querySelectorAll("path");
const title = document.querySelectorAll(".title");

const colors1 = ["#600A4D", "#090620", "#0097E6", "#2e2e2e"];
const colors2 = ["#FFE5E5", "#FFE5E5", "#C3BCF9", "rgb(255, 255, 255)"];
const colors3 = ["#600A4D", "#090620", "#0097E6", "#2e2e2e"];
let colorIndex = 0;

const handlerColor = () => {
  selector1.forEach((el) => (el.style.background = colors1[colorIndex]));
  selector2.forEach((el) => (el.style.background = colors2[colorIndex]));
  svg.forEach((el) => (el.style = `fill: ${colors3[colorIndex]}`));
  title.forEach((el) => (el.style.color = colors3[colorIndex]));

  colorIndex = (colorIndex + 1) % colors1.length;
};

// // /// three.js
// let renderer, scene, camera, cameraCtrl;
// let width, height, cx, cy, wWidth, wHeight;
// const TMath = THREE.Math;

// let conf = {
//   color: 0x000000,
//   objectWidth: 12,
//   objectThickness: 3,
//   ambientColor: 0xffffff,
//   light1Color: 0xffffff,
//   shadow: false,
//   perspective: 75,
//   cameraZ: 75,
// };

// let objects = [];
// let geometry, material;
// let hMap, hMap0, nx, ny;

// init();

// function init() {
//   renderer = new THREE.WebGLRenderer({ canvas: document.getElementById("reveal-effect"), antialias: true, alpha: true });
//   renderer.setSize(window.innerWidth, window.innerHeight);
//   document.body.appendChild(renderer.domElement);

//   camera = new THREE.PerspectiveCamera(conf.perspective, window.innerWidth / window.innerHeight, 0.1, 1000);
//   camera.position.z = conf.cameraZ;

//   scene = new THREE.Scene();
//   geometry = new THREE.BoxGeometry(conf.objectWidth, conf.objectWidth, conf.objectThickness);

//   window.addEventListener("load", initScene);
//   document.getElementById("trigger").addEventListener("click", initScene);

//   animate();
// }

// function initScene() {
//   onResize();
//   scene = new THREE.Scene();
//   initLights();
//   initObjects();
// }

// function initLights() {
//   scene.add(new THREE.AmbientLight(conf.ambientColor));
//   let light = new THREE.PointLight(0xffffff);
//   light.position.z = 100;
//   scene.add(light);
// }

// function initObjects() {
//   objects = [];
//   nx = Math.round(wWidth / conf.objectWidth) + 1;
//   ny = Math.round(wHeight / conf.objectWidth) + 1;
//   let mesh, x, y;
//   for (let i = 0; i < nx; i++) {
//     for (let j = 0; j < ny; j++) {
//       material = new THREE.MeshLambertMaterial({ color: conf.color, transparent: true, opacity: 1 });
//       mesh = new THREE.Mesh(geometry, material);
//       x = -wWidth / 2 + i * conf.objectWidth;
//       y = -wHeight / 2 + j * conf.objectWidth;
//       mesh.position.set(x, y, 0);
//       objects.push(mesh);
//       scene.add(mesh);
//     }
//   }
//   document.body.classList.add("loaded");
//   startAnim();
// }

// function startAnim() {
//   document.body.classList.remove("revealed");
//   objects.forEach((mesh) => {
//     mesh.rotation.set(0, 0, 0);
//     mesh.material.opacity = 1;
//     mesh.position.z = 0;
//     let delay = TMath.randFloat(1, 2);
//     let rx = TMath.randFloatSpread(2 * Math.PI);
//     let ry = TMath.randFloatSpread(2 * Math.PI);
//     let rz = TMath.randFloatSpread(2 * Math.PI);
//     TweenMax.to(mesh.rotation, 2, { x: rx, y: ry, z: rz, delay: delay });
//     TweenMax.to(mesh.position, 2, { z: 80, delay: delay + 0.5, ease: Power1.easeOut });
//     TweenMax.to(mesh.material, 2, { opacity: 0, delay: delay + 0.5 });
//   });
//   setTimeout(() => {
//     document.body.classList.add("revealed");
//   }, 4500);
// }

// function animate() {
//   requestAnimationFrame(animate);
//   renderer.render(scene, camera);
// }

// function onResize() {
//   width = window.innerWidth;
//   cx = width / 2;
//   height = window.innerHeight;
//   cy = height / 2;
//   camera.aspect = width / height;
//   camera.updateProjectionMatrix();
//   renderer.setSize(width, height);

//   size = getRendererSize();
//   wWidth = size[0];
//   wHeight = size[1];
// }

// function getRendererSize() {
//   const cam = new THREE.PerspectiveCamera(conf.perspective, camera.aspect);
//   const vFOV = (cam.fov * Math.PI) / 180;
//   const height = 2 * Math.tan(vFOV / 2) * Math.abs(conf.cameraZ);
//   const width = height * cam.aspect;
//   return [width, height];
// }

// window.addEventListener("load", () => {
//   const heading = document.getElementById("heading");
//   heading.style.width = "auto";
//   heading.style.height = "auto";
//   heading.style.backgroundColor = "transparent";
//   setTimeout(() => {
//     heading.style.opacity = "0"; // Fade out <h1>
//   }, 1500);
// });

const icon = document.querySelector(".icon");
const icon_menu = document.querySelector(".icon-menu");
const burger_menu = document.querySelector(".burger-menu");

icon.addEventListener("click", () => {
  if (burger_menu.offsetHeight < 10) {
    burger_menu.style.height = `${burger_menu.scrollHeight}px`;
  } else {
    burger_menu.style.height = `0px`;
  }
});

// stakes slider

const stakes__wrapper = document.querySelector(".stakes__wrapper-content");
const stakesBtn = document.querySelector(".stakes__btns");

let x = 0;
stakesBtn.addEventListener("click", (ev) => {
  if (x <= -1104) {
    stakes__wrapper.style.transform = `translate(0px)`;
    x = 0;
  } else {
    if (ev.target.classList.contains("next")) {
      stakes__wrapper.style.transform = `translate(${x - 169}px)`;
      stakes__wrapper.style.transition = "transform 0.5s ease";
      x = parseInt(stakes__wrapper.style.transform.replace(/[^\d.-]/g, ""));
    } else if (ev.target.classList.contains("prev")) {
      if (x === 0) {
        return;
      }
      stakes__wrapper.style.transform = `translate(${x + 169}px)`;
      x = parseInt(stakes__wrapper.style.transform.replace(/[^\d.-]/g, ""));
    }
  }
  if (x >= 0) {
    stakesBtn.children[0].style.opacity = ".5";
  } else {
    stakesBtn.children[0].style.opacity = "1";
  }
});

// var swiper = new Swiper(".stakes .swiper", {
//   effect: "cards",
//   grabCursor: true,
// });

var swiper = new Swiper(".portfolio .swiper", {
  direction: "vertical",
  slidesPerView: 1,
  spaceBetween: 30,
  mousewheel: true,
  effect: "cards",
  pagination: {
    el: ".swiper-pagination",
    clickable: true,
  },
});

// burger-close

const burgerItems = document.querySelector(".burger-menu ul");

burgerItems.addEventListener("click", (ev) => {
  if (ev.target.localName === "li" || ev.target.localName === "a") {
    burger_menu.style.height = `0px`;
  }
});

// Ստուգել ու վերականգնել պահված լեզուն
document.addEventListener("DOMContentLoaded", () => {
  const savedLanguage = localStorage.getItem("language") || "en";
  language.value = savedLanguage; // Թարմացնում ենք ընտրիչի արժեքը
  setLeng(savedLanguage); // Կիրառում ենք լեզուն
});


const translations = {
  ru: {
    home: "Главная",
    advantages: "Преимущества",
    skills: "Навыки",
    services: "Услуги",
    portfolio: "Портфолио",
    contacts: "Контакты",
    frontend: "Фронтенд-разработчик",
    title:
      "Приветствую вас! Я- Нарек. Являюсь Frontend разработчиком, опыт работы более 4-х лет. Качественно выполню работу, затратив малое количество времени.",
    work: "Скоротсь работы",
    info: "Все заказы сдаются в срок",
    quality: "Качественная работа",
    cross: "Кроссбраузерный, валидный, чистый код",
    hours: "График работы",
    adapt: "Подстраиваюс под графиком клиента что бы всегда быть на связе",
    myname: "Меликсетян Нарек",
    vers: "Верстка (GULP)",
    opit: "Опыт работы: ",
    hardWork: "Бистрая работа",
    pravId: "Бесплатные правки",
    price1: "Цена: 750 ₽/час",
    price2: "Цена: 1500 ₽/час",
    price3: "Цена: 500 ₽/час",
    design: "Удобный дизайн",
    code: "Качественная код",
    veni: "Качественная верстка",
    zakId: "Заказать",
  },
  en: {
    home: "Home",
    advantages: "Advantages",
    skills: "Skills",
    services: "Services",
    portfolio: "Portfolio",
    contacts: "Contacts",
    frontend: "Frontend developer",
    title:
      "Greetings! I am Narek. I am a Frontend developer with more than 4 years of experience. I will do quality work, spending little time.",
    work: "Work will be faster",
    info: "All orders are delivered on time",
    quality: "Quality work",
    cross: "Cross-browser, valid, clean code",
    hours: "Working hours",
    adapt: "I adapt to the client’s schedule to always be in touch",
    myname: "Meliksetyan Narek",
    vers: "Layout (GULP)",
    opit: "Experience: ",
    hardWork: "Fast work",
    pravId: "Free edits",
    price1: "Price: 7,70 $/hour",
    price2: "Price: 15,40 $/hour",
    price3: "Price: 5,13 $/hour",
    design: "User-friendly design",
    code: "Quality code",
    veni: "High-quality layout",
    zakId:"Order"
  },
};

const language = document.querySelector("#language-selector");
const home = document.getElementById("homee");
const advantages = document.getElementById("advantagesss");
const skills = document.getElementById("skillls");
const services = document.getElementById("servicesss");
const portfolio = document.getElementById("portfolioo");
const contacts = document.getElementById("contactsss");
const frontend = document.getElementById("frontend");
const titles = document.getElementById("title");
const head = document.getElementById("head");
const work = document.getElementById("work");
const info = document.getElementById("info");
const quality = document.getElementById("quality");
const cross = document.getElementById("cross");
const hours = document.getElementById("hours");
const adapt = document.getElementById("adapt");
const ski = document.getElementById("ski");
const tit = document.getElementById("tit");
const port = document.getElementById("port");
const cont = document.getElementById("cont");
const myname = document.getElementById("myname");
const homes = document.getElementById("homes");
const advantagess = document.getElementById("advantagess");
const skillss = document.getElementById("skillss");
const servicess = document.getElementById("servicess");
const portfolios = document.getElementById("portfolios");
const contactss = document.getElementById("contac");
const ma = document.getElementById("ma");
const ad = document.getElementById("ad");
const st = document.getElementById("st");
const se = document.getElementById("se");
const po = document.getElementById("po");
const co = document.getElementById("co");
const vers = document.getElementById("vers");
const opitId = document.querySelectorAll(".opit-id");
const fastId = document.querySelectorAll(".fastId");
const zakId = document.querySelectorAll(".zakId");
const pravId = document.querySelectorAll(".pravId");
const price1 = document.getElementById("price-one");
const price2 = document.getElementById("price-two");
const price3 = document.getElementById("price-three");
const design = document.getElementById("design");
const code = document.getElementById("code");
const veni = document.getElementById("veni");

language.addEventListener("change", (ev) => {
  setLeng(ev.target.value);
});

const setLeng = (leng) => {
   localStorage.setItem("language", leng);
  if (leng == "en") {
    home.textContent = translations.en.home;
    advantages.textContent = translations.en.advantages;
    skills.textContent = translations.en.skills;
    services.textContent = translations.en.services;
    portfolio.textContent = translations.en.portfolio;
    contacts.textContent = translations.en.contacts;
    frontend.textContent = translations.en.frontend;
    titles.textContent = translations.en.title;
    head.textContent = translations.en.advantages;
    work.textContent = translations.en.work;
    info.textContent = translations.en.info;
    quality.textContent = translations.en.quality;
    cross.textContent = translations.en.cross;
    hours.textContent = translations.en.hours;
    adapt.textContent = translations.en.adapt;
    ski.textContent = translations.en.skills;
    tit.textContent = translations.en.services;
    port.textContent = translations.en.portfolio;
    cont.textContent = translations.en.contacts;
    myname.textContent = translations.en.myname;
    homes.textContent = translations.en.home;
    advantagess.textContent = translations.en.advantages;
    skillss.textContent = translations.en.skills;
    servicess.textContent = translations.en.services;
    portfolios.textContent = translations.en.portfolio;
    contactss.textContent = translations.en.contacts;
    ma.textContent = translations.en.home;
    ad.textContent = translations.en.advantages;
    st.textContent = translations.en.skills;
    se.textContent = translations.en.services;
    po.textContent = translations.en.portfolio;
    co.textContent = translations.en.contacts;
    vers.textContent = translations.en.vers;
    opitId.forEach((el) => {
      el.textContent = translations.en.opit;
    });
    fastId.forEach((el) => {
      el.textContent = translations.en.hardWork;
    });
    pravId.forEach((el) => {
      el.textContent = translations.en.pravId;
    });
    price1.textContent = translations.en.price1;
    price2.textContent = translations.en.price2;
    price3.textContent = translations.en.price3;
    design.textContent = translations.en.design;
    code.textContent = translations.en.code;
    veni.textContent = translations.en.veni;
    zakId.forEach((el) => {
      el.textContent = translations.en.zakId;
    });
  } else if (leng == "ru") {
    home.textContent = translations.ru.home;
    advantages.textContent = translations.ru.advantages;
    skills.textContent = translations.ru.skills;
    services.textContent = translations.ru.services;
    portfolio.textContent = translations.ru.portfolio;
    contacts.textContent = translations.ru.contacts;
    frontend.textContent = translations.ru.frontend;
    titles.textContent = translations.ru.title;
    head.textContent = translations.ru.advantages;
    work.textContent = translations.ru.work;
    info.textContent = translations.ru.info;
    quality.textContent = translations.ru.quality;
    cross.textContent = translations.ru.cross;
    hours.textContent = translations.ru.hours;
    adapt.textContent = translations.ru.adapt;
    ski.textContent = translations.ru.skills;
    tit.textContent = translations.ru.services;
    port.textContent = translations.ru.portfolio;
    myname.textContent = translations.ru.myname;
    cont.textContent = translations.ru.contacts;
    homes.textContent = translations.ru.home;
    advantagess.textContent = translations.ru.advantages;
    skillss.textContent = translations.ru.skills;
    servicess.textContent = translations.ru.services;
    portfolios.textContent = translations.ru.portfolio;
    contactss.textContent = translations.ru.contacts;
    ma.textContent = translations.ru.home;
    ad.textContent = translations.ru.advantages;
    st.textContent = translations.ru.skills;
    se.textContent = translations.ru.services;
    po.textContent = translations.ru.portfolio;
    co.textContent = translations.ru.contacts;
    vers.textContent = translations.ru.vers;
    opitId.forEach((el) => {
      el.textContent = translations.ru.opit;
    });
    fastId.forEach((el) => {
      el.textContent = translations.ru.hardWork;
    });
    pravId.forEach((el) => {
      el.textContent = translations.ru.pravId;
    });
    price1.textContent = translations.ru.price1;
    price2.textContent = translations.ru.price2;
    price3.textContent = translations.ru.price3;
    design.textContent = translations.ru.design;
    code.textContent = translations.ru.code;
    veni.textContent = translations.ru.veni
     zakId.forEach((el) => {
       el.textContent = translations.ru.zakId;
     });
  }
};


